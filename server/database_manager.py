import sqlite3
import hashlib

class DatabaseManager:
    def __init__(self, db_name='messenger.db'):
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.create_tables()

    def create_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                status_emoji TEXT,
                storage_used INTEGER DEFAULT 0
            )
        ''')
       # –ò—Å—Ç–æ—Ä–∏–∏
       self.cursor.execute('''
           CREATE TABLE IF NOT EXISTS stories (
               id INTEGER PRIMARY KEY AUTOINCREMENT,
               user_id INTEGER NOT NULL,
               content_path TEXT NOT NULL,
               created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
               FOREIGN KEY (user_id) REFERENCES users (id)
           )
       ''')
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤, —Å–æ–æ–±—â–µ–Ω–∏–π, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Ç.–¥.
        self.conn.commit()

    def _hash_password(self, password):
        """–•—ç—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è."""
        return hashlib.sha256(password.encode('utf-8')).hexdigest()

    def register_user(self, username, password):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if self.get_user(username):
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        
        password_hash = self._hash_password(password)
        try:
            self.cursor.execute(
                "INSERT INTO users (username, password_hash, status_emoji) VALUES (?, ?, ?)",
                (username, password_hash, 'üòÄ') # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
            self.conn.commit()
            return True, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ."
        except sqlite3.IntegrityError:
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."

    def check_credentials(self, username, password):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user = self.get_user(username)
        if user:
            password_hash = self._hash_password(password)
            if user[2] == password_hash:
                return True
        return False

    def get_user(self, username):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏."""
        self.cursor.execute("SELECT * FROM users WHERE username=?", (username,))
        return self.cursor.fetchone()

    def close(self):
        self.conn.close()

    def update_user_status(self, username, emoji):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            self.cursor.execute("UPDATE users SET status_emoji = ? WHERE username = ?", (emoji, username))
            self.conn.commit()
            return True
        except sqlite3.Error:
            return False

   def add_story(self, username, content_path):
       """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
       user = self.get_user(username)
       if not user:
           return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
       
       user_id = user[0]
       try:
           self.cursor.execute(
               "INSERT INTO stories (user_id, content_path) VALUES (?, ?)",
               (user_id, content_path)
           )
           self.conn.commit()
           return True, "–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞."
       except sqlite3.Error as e:
           return False, f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}"

   def get_active_stories(self):
       """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)."""
       self.cursor.execute("""
           SELECT u.username, s.content_path, s.created_at
           FROM stories s
           JOIN users u ON s.user_id = u.id
           WHERE s.created_at >= datetime('now', '-24 hours')
           ORDER BY s.created_at DESC
       """)
       return self.cursor.fetchall()

   def delete_expired_stories(self):
       """–£–¥–∞–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤."""
       try:
           self.cursor.execute("DELETE FROM stories WHERE created_at < datetime('now', '-24 hours')")
           deleted_rows = self.cursor.rowcount
           self.conn.commit()
           return deleted_rows
       except sqlite3.Error:
           return 0
