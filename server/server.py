import socket
import threading
import json
from database_manager import DatabaseManager

HOST = '0.0.0.0'
PORT = 12345

class Server:
    def __init__(self):
        self.db = DatabaseManager()
        self.clients = {}  # {conn: username}
        self.lock = threading.Lock()
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind((HOST, PORT))

    def start(self):
        self.server_socket.listen()
        print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {HOST}:{PORT}")
        try:
            while True:
                conn, addr = self.server_socket.accept()
                thread = threading.Thread(target=self.handle_client, args=(conn, addr))
                thread.start()
        except KeyboardInterrupt:
            print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
        finally:
            self.db.close()
            self.server_socket.close()

    def handle_client(self, conn, addr):
        print(f"–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç {addr}")
        is_authenticated = False
        username = None
        
        try:
            while True:
                data = conn.recv(4096)
                if not data:
                    break
                
                try:
                    request = json.loads(data.decode('utf-8'))
                    command = request.get('command')
                    payload = request.get('payload')

                    if not is_authenticated:
                        if command == 'login':
                            username, is_authenticated = self.login_user(conn, payload)
                        elif command == 'register':
                            self.register_user(conn, payload)
                        else:
                            self.send_response(conn, 'error', '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.')
                    else:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        if command == 'send_message':
                            self.process_new_message(conn, username, payload)
                        elif command == 'list_users':
                            self.list_users(conn)
                        elif command == 'call_request':
                            self.handle_call_request(username, payload, conn.getpeername())
                        elif command == 'call_response':
                            self.handle_call_response(username, payload, conn.getpeername())
                        elif command == 'set_status':
                           self.handle_set_status(username, payload)
                        else:
                            self.send_response(conn, 'error', f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}')

                except (json.JSONDecodeError, KeyError):
                    self.send_response(conn, 'error', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.')

        except (socket.error, ConnectionResetError):
            print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {addr} –ø–æ—Ç–µ—Ä—è–Ω–æ.")
        finally:
            with self.lock:
                if conn in self.clients:
                    disconnected_user = self.clients.pop(conn)
                    self.broadcast_user_list_update() # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            conn.close()
            print(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {addr} –∑–∞–∫—Ä—ã—Ç–æ.")

    def login_user(self, conn, payload):
        username = payload.get('username')
        password = payload.get('password')
        if self.db.check_credentials(username, password):
            with self.lock:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å –¥—Ä—É–≥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                if username in self.clients.values():
                    self.send_response(conn, 'error', '–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–µ—Ç–∏.')
                    return None, False
                self.clients[conn] = username
            
            self.send_response(conn, 'login_success', {'username': username})
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É.")
            # –û–ø–æ–≤–µ—â–∞–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
            self.broadcast_user_list_update()
            return username, True
        else:
            self.send_response(conn, 'error', '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.')
            return None, False

    def register_user(self, conn, payload):
        username = payload.get('username')
        password = payload.get('password')
        success, message = self.db.register_user(username, password)
        if success:
            self.send_response(conn, 'register_success', message)
        else:
            self.send_response(conn, 'error', message)

    def send_response(self, conn, status, data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É."""
        response = {'status': status, 'data': data}
        try:
            conn.sendall(json.dumps(response).encode('utf-8'))
        except socket.error:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")

    def broadcast(self, response, sender_conn=None):
        """–†–∞—Å—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤—Å–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
        with self.lock:
            for conn in self.clients:
                if conn != sender_conn:
                    try:
                        conn.sendall(json.dumps(response).encode('utf-8'))
                    except socket.error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {self.clients[conn]}")

    def process_new_message(self, conn, username, payload):
       """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ GIF) –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –µ–≥–æ."""
       msg_type = payload.get('type', 'text')
       message_data = {'sender': username, 'type': msg_type}

       if msg_type == 'text':
           text = payload.get('text')
           if not text:
               self.send_response(conn, 'error', '–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.')
               return
           message_data['text'] = text
           print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {text}")
       elif msg_type == 'gif':
           gif_path = payload.get('gif_path')
           if not gif_path:
               self.send_response(conn, 'error', '–°–æ–æ–±—â–µ–Ω–∏–µ GIF –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å.')
               return
           message_data['gif_path'] = gif_path
           print(f"GIF –æ—Ç {username}: {gif_path}")
       else:
           self.send_response(conn, 'error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.')
           return

       response = {'status': 'new_message', 'data': message_data}
       self.broadcast(response, sender_conn=conn)

    def find_connection_by_username(self, username):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with self.lock:
            for conn, user in self.clients.items():
                if user == username:
                    return conn
        return None

    def list_users(self, conn=None):
       """
       –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏.
       –ï—Å–ª–∏ conn —É–∫–∞–∑–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.
       –ò–Ω–∞—á–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ broadcast.
       """
       with self.lock:
           online_usernames = list(self.clients.values())
       
       users_with_statuses = []
       for username in online_usernames:
           user_data = self.db.get_user(username)
           if user_data:
               # user_data -> (id, username, password_hash, status_emoji, storage_used)
               status_emoji = user_data[3] if user_data[3] else 'üòÄ'
               users_with_statuses.append({'username': username, 'status': status_emoji})

       if conn:
           self.send_response(conn, 'user_list', {'users': users_with_statuses})
       return users_with_statuses

    def broadcast_user_list_update(self):
       """–†–∞—Å—Å—ã–ª–∞–µ—Ç –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
       print("–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
       users = self.list_users()
       response = {'status': 'user_list', 'data': {'users': users}}
       self.broadcast(response)

    def handle_call_request(self, from_user, payload, addr):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è UDP."""
        to_user = payload.get('to_user')
        udp_port = payload.get('udp_port')
        to_conn = self.find_connection_by_username(to_user)

        if to_conn and udp_port:
            caller_ip = addr[0]
            print(f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫ –æ—Ç {from_user} ({caller_ip}:{udp_port}) –∫ {to_user}")
            
            self.send_response(to_conn, 'incoming_call', {
                'from_user': from_user,
                'caller_addr': (caller_ip, udp_port)
            })
        elif not to_conn:
            from_conn = self.find_connection_by_username(from_user)
            self.send_response(from_conn, 'error', f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å–µ—Ç–∏.')
        else: # not udp_port
             from_conn = self.find_connection_by_username(from_user)
             self.send_response(from_conn, 'error', '–ù–µ —É–∫–∞–∑–∞–Ω UDP –ø–æ—Ä—Ç –¥–ª—è –∑–≤–æ–Ω–∫–∞.')

    def handle_call_response(self, from_user, payload, addr):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∑–≤–æ–Ω–æ–∫, –≤–∫–ª—é—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è UDP."""
        to_user = payload.get('to_user')
        answer = payload.get('answer')  # 'accept' or 'reject'
        udp_port = payload.get('udp_port') # –ü–æ—Ä—Ç –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
        to_conn = self.find_connection_by_username(to_user)

        if to_conn:
            response_payload = {'from_user': from_user, 'answer': answer}
            if answer == 'accept' and udp_port:
                callee_ip = addr[0]
                response_payload['callee_addr'] = (callee_ip, udp_port)
                print(f"–û—Ç–≤–µ—Ç 'accept' –æ—Ç {from_user} –¥–ª—è {to_user} —Å –∞–¥—Ä–µ—Å–æ–º {callee_ip}:{udp_port}")
            else:
                print(f"–ü–µ—Ä–µ—Å—ã–ª–∞—é –æ—Ç–≤–µ—Ç '{answer}' –æ—Ç {from_user} –∫ {to_user}")

            self.send_response(to_conn, 'call_response', response_payload)


    def handle_set_status(self, username, payload):
       """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ–Ω—É —ç–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å–∞."""
       emoji = payload.get('status_emoji')
       if emoji:
           if self.db.update_user_status(username, emoji):
               print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å: {emoji}")
               self.send_response(self.find_connection_by_username(username), 'status_update_success', {'status_emoji': emoji})
               self.broadcast_user_list_update()
           else:
               self.send_response(self.find_connection_by_username(username), 'error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.')
       else:
           self.send_response(self.find_connection_by_username(username), 'error', '–ù–µ —É–∫–∞–∑–∞–Ω —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞.')


if __name__ == "__main__":
    server = Server()
    server.start()