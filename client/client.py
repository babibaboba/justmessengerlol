import sys
import socket
import threading
import json
from PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit, QLineEdit,
                             QPushButton, QVBoxLayout, QWidget, QMessageBox,
                             QDialog, QLabel, QFormLayout, QListWidget, QHBoxLayout, QSplitter,
                             QInputDialog, QGridLayout)
from PyQt6.QtCore import QThread, pyqtSignal, Qt, QSize
import pyaudio

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã, –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
try:
    from config_manager import ConfigManager
    from p2p_manager import P2PManager
    from plugin_manager import PluginManager
except ImportError:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏ config_manager.py, p2p_manager.py –∏–ª–∏ plugin_manager.py")
    sys.exit(1)


HOST = '127.0.0.1'
PORT = 12345
# --- –ê—É–¥–∏–æ ---
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100


# --- –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ ---

class CallWindow(QDialog):
    """–û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞."""
    hang_up_pressed = pyqtSignal()

    def __init__(self, peer_username, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"–ó–≤–æ–Ω–æ–∫ —Å {peer_username}")
        self.setFixedSize(300, 150)
        
        self.layout = QVBoxLayout(self)
        self.label = QLabel(f"–ò–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {peer_username}...")
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.hang_up_button = QPushButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫")
        
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.hang_up_button)
        
        self.hang_up_button.clicked.connect(self.hang_up_pressed.emit)
        self.hang_up_pressed.connect(self.accept) # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

class EmojiPanel(QDialog):
    """–ü–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏."""
    emoji_selected = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏")
        self.setFixedSize(300, 200)
        
        self.layout = QGridLayout(self)
        
        # –ü—Ä–æ—Å—Ç–æ–π –Ω–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        emojis = [
            'üòÄ', 'üòÇ', 'üòç', 'ü§î', 'üëç', 'üëé', '‚ù§Ô∏è', 'üî•',
            'üöÄ', 'üéâ', 'üëã', 'üò¢', 'üò†', 'üôè', 'üíª', 'üçï'
        ]
        
        row, col = 0, 0
        for emoji in emojis:
            button = QPushButton(emoji)
            button.setFixedSize(40, 40)
            button.setStyleSheet("font-size: 20px;")
            button.clicked.connect(lambda _, e=emoji: self.select_emoji(e))
            self.layout.addWidget(button, row, col)
            col += 1
            if col > 5:
                col = 0
                row += 1
                
    def select_emoji(self, emoji):
        self.emoji_selected.emit(emoji)
        self.accept()


class ModeSelectionDialog(QDialog):
   """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
   def __init__(self, parent=None):
       super().__init__(parent)
       self.setWindowTitle("–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞")
       self.layout = QVBoxLayout(self)
       self.result = None

       self.label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞:")
       self.layout.addWidget(self.label)

       self.server_button = QPushButton("–ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä")
       self.server_button.clicked.connect(lambda: self.set_mode('server'))
       self.layout.addWidget(self.server_button)

       self.p2p_internet_button = QPushButton("P2P (–ò–Ω—Ç–µ—Ä–Ω–µ—Ç)")
       self.p2p_internet_button.clicked.connect(lambda: self.set_mode('p2p_internet'))
       self.layout.addWidget(self.p2p_internet_button)

       self.p2p_local_button = QPushButton("P2P (–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å)")
       self.p2p_local_button.clicked.connect(lambda: self.set_mode('p2p_local'))
       self.layout.addWidget(self.p2p_local_button)

   def set_mode(self, mode):
       self.result = mode
       self.accept()

class LoginDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—Ö–æ–¥")
        self.layout = QFormLayout(self)

        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        
        self.layout.addRow("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", self.username_input)
        self.layout.addRow("–ü–∞—Ä–æ–ª—å:", self.password_input)

        self.login_button = QPushButton("–í–æ–π—Ç–∏")
        self.register_button = QPushButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        
        self.layout.addWidget(self.login_button)
        self.layout.addWidget(self.register_button)

        self.login_button.clicked.connect(self.accept)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–¥, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∏—Ç—å –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.register_button.clicked.connect(lambda: self.done(2)) 

    def get_credentials(self):
        return self.username_input.text(), self.password_input.text()

# --- –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ ---

class ServerNetworkThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º."""
    response_received = pyqtSignal(dict)
    connection_lost = pyqtSignal()

    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        self.running = True

    def run(self):
        while self.running:
            try:
                data = self.sock.recv(4096)
                if not data:
                    break
                response = json.loads(data.decode('utf-8'))
                self.response_received.emit(response)
            except (socket.error, json.JSONDecodeError, ConnectionResetError):
                if self.running:
                    self.running = False
        self.connection_lost.emit()

    def stop(self):
        self.running = False
        try:
            self.sock.shutdown(socket.SHUT_RDWR)
        except (socket.error, OSError):
            pass
        self.sock.close()

# --- –ü–æ—Ç–æ–∫ –¥–ª—è –∞—É–¥–∏–æ ---

class AudioThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö."""
    def __init__(self, udp_socket, peer_addr):
        super().__init__()
        self.udp_socket = udp_socket
        self.peer_addr = peer_addr
        self.running = True
        self.audio = pyaudio.PyAudio()
        
        self.output_stream = self.audio.open(format=FORMAT, channels=CHANNELS,
                                             rate=RATE, output=True,
                                             frames_per_buffer=CHUNK)
        
        self.input_stream = self.audio.open(format=FORMAT, channels=CHANNELS,
                                            rate=RATE, input=True,
                                            frames_per_buffer=CHUNK)

    def run(self):
        send_thread = threading.Thread(target=self.send_audio)
        receive_thread = threading.Thread(target=self.receive_audio)
        
        send_thread.start()
        receive_thread.start()
        
        send_thread.join()
        receive_thread.join()

    def send_audio(self):
        while self.running:
            try:
                data = self.input_stream.read(CHUNK)
                self.udp_socket.sendto(data, self.peer_addr)
            except (IOError, OSError):
                break

    def receive_audio(self):
        while self.running:
            try:
                data, _ = self.udp_socket.recvfrom(CHUNK * 2)
                self.output_stream.write(data)
            except (IOError, OSError):
                break

    def stop(self):
        self.running = False
        self.input_stream.stop_stream()
        self.input_stream.close()
        self.output_stream.stop_stream()
        self.output_stream.close()
        self.audio.terminate()
        self.udp_socket.close()
        print("–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---

class ChatWindow(QMainWindow):
    def __init__(self, mode):
        super().__init__()
        self.mode = mode
        self.username = None
        self.network_thread = None
        self.p2p_manager = None
        self.sock = None
        self.plugin_manager = PluginManager(plugin_folder='VoiceChat/plugins')
        
        # –î–ª—è –∑–≤–æ–Ω–∫–æ–≤
        self.udp_socket = None
        self.audio_thread = None
        self.call_window = None
        self.current_peer_addr = None # –ê–¥—Ä–µ—Å –¥–ª—è P2P –∑–≤–æ–Ω–∫–∞
        self.current_theme = 'light'

        self.setup_ui()
        self.apply_theme() # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.plugin_manager.discover_plugins()
        self.initialize_mode()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–∫–Ω–∞."""
        self.setWindowTitle(f"JustMessenger ({self.mode.replace('_', ' ').title()})")
        self.setGeometry(100, 100, 500, 600)
        
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QHBoxLayout(self.central_widget)
        splitter = QSplitter(Qt.Orientation.Horizontal)

        chat_widget = QWidget()
        chat_layout = QVBoxLayout(chat_widget)
        self.chat_box = QTextEdit()
        self.chat_box.setReadOnly(True)
        
        # Layout –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–æ–∫
        input_layout = QHBoxLayout()
        self.msg_entry = QLineEdit()
        self.msg_entry.returnPressed.connect(self.send_message)
        
        self.emoji_button = QPushButton("üòÄ")
        self.emoji_button.setFixedSize(QSize(40, 28))
        self.emoji_button.clicked.connect(self.open_emoji_panel)

        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.clicked.connect(self.send_message)
        
        input_layout.addWidget(self.msg_entry)
        input_layout.addWidget(self.emoji_button)
        input_layout.addWidget(self.send_button)

        chat_layout.addWidget(self.chat_box)
        chat_layout.addLayout(input_layout)
        splitter.addWidget(chat_widget)

        users_widget = QWidget()
        users_layout = QVBoxLayout(users_widget)
        self.users_list = QListWidget()
        users_layout.addWidget(QLabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ—Ç–∏:"))
        
        # --- –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –¥–ª—è DHT ---
        self.peer_search_widget = QWidget()
        peer_search_layout = QHBoxLayout(self.peer_search_widget)
        peer_search_layout.setContentsMargins(0, 0, 0, 0)
        self.peer_search_input = QLineEdit()
        self.peer_search_input.setPlaceholderText("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞")
        self.peer_search_button = QPushButton("–ù–∞–π—Ç–∏")
        peer_search_layout.addWidget(self.peer_search_input)
        peer_search_layout.addWidget(self.peer_search_button)
        self.peer_search_widget.setVisible(False) # –°–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        users_layout.addWidget(self.peer_search_widget)
        # --- –ö–æ–Ω–µ—Ü –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞ ---

        users_layout.addWidget(self.users_list)
        
        self.status_button = QPushButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        self.status_button.clicked.connect(self.change_status)
        users_layout.addWidget(self.status_button)
        self.status_button.setVisible(False) # –°–∫—Ä—ã–≤–∞–µ–º –¥–æ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É

        splitter.addWidget(users_widget)
        
        splitter.setSizes([350, 150])
        self.main_layout.addWidget(splitter)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ç–µ–º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.theme_button = QPushButton("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        self.theme_button.clicked.connect(self.toggle_theme)
        chat_layout.addWidget(self.theme_button)

    def initialize_mode(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        if self.mode == 'p2p_local':
            self.init_p2p_mode(local=True)
        elif self.mode == 'p2p_internet':
            self.init_p2p_mode(local=False)
        else:
            self.init_server_mode()

    def init_p2p_mode(self, local=True):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è P2P —Ä–µ–∂–∏–º–∞."""
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–≤–æ–Ω–∫–∞
        self.call_button = QPushButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å")
        self.call_button.clicked.connect(self.initiate_call)
        self.call_button.setEnabled(False)
        self.users_list.itemSelectionChanged.connect(lambda: self.call_button.setEnabled(True))
        self.main_layout.itemAt(1).widget().layout().insertWidget(0, self.call_button)

        config_manager = ConfigManager()
        config = config_manager.load_config()
        self.username = config.get('username')

        if not self.username:
            text, ok = QInputDialog.getText(self, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è P2P —Å–µ—Å—Å–∏–∏:')
            if ok and text:
                self.username = text
                config_manager.save_config({'username': self.username})
            else:
                sys.exit()
        
        self.setWindowTitle(f"–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä (P2P) - {self.username}")
        self.p2p_manager = P2PManager(self.username, local=local)
        self.p2p_manager.peer_discovered.connect(self.add_peer)
        self.p2p_manager.peer_lost.connect(self.remove_peer)
        self.p2p_manager.message_received.connect(self.p2p_message_received)
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∑–≤–æ–Ω–∫–æ–≤
        self.p2p_manager.incoming_p2p_call.connect(self.handle_p2p_call_request)
        self.p2p_manager.p2p_call_response.connect(self.handle_p2p_call_response)
        self.p2p_manager.p2p_hang_up.connect(self.handle_p2p_hang_up)
        self.p2p_manager.start()
        if local:
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã –≤ —Ä–µ–∂–∏–º–µ P2P (–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å). –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        else:
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã –≤ —Ä–µ–∂–∏–º–µ P2P (–ò–Ω—Ç–µ—Ä–Ω–µ—Ç). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            self.peer_search_widget.setVisible(True)
            self.peer_search_button.clicked.connect(self.search_peer_in_dht)
            self.peer_search_input.returnPressed.connect(self.search_peer_in_dht)

    def init_server_mode(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
        self.users_list.setVisible(True)
        self.call_button = QPushButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å")
        self.call_button.clicked.connect(self.initiate_call)
        self.call_button.setEnabled(False)
        self.users_list.itemSelectionChanged.connect(lambda: self.call_button.setEnabled(True))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.main_layout.itemAt(1).widget().layout().insertWidget(0, self.call_button)

        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((HOST, PORT))
            
            self.network_thread = ServerNetworkThread(self.sock)
            self.network_thread.response_received.connect(self.handle_server_response)
            self.network_thread.connection_lost.connect(self.handle_connection_lost)
            self.network_thread.start()

            self.show_login_dialog()
        except ConnectionRefusedError:
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
            self.disable_input()

    def show_login_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        dialog = LoginDialog(self)
        result = dialog.exec()
        username, password = dialog.get_credentials()

        if not username or not password:
            self.close()
            return

        if result == QDialog.DialogCode.Accepted:
            self.send_command('login', {'username': username, 'password': password})
        elif result == 2:
            self.send_command('register', {'username': username, 'password': password})
            # –ü–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∂–µ–º –æ–∫–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞
            QMessageBox.information(self, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.")
            self.show_login_dialog()

    def send_command(self, command, payload):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON-–∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
        if not self.sock: return
        request = {'command': command, 'payload': payload}
        try:
            self.sock.sendall(json.dumps(request).encode('utf-8'))
        except socket.error:
            self.handle_connection_lost()

    def handle_server_response(self, response):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
        status = response.get('status')
        data = response.get('data', '')

        if status == 'login_success':
            self.username = data.get('username')
            self.setWindowTitle(f"–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä - {self.username}")
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.")
            self.enable_input()
            self.status_button.setVisible(True) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
            # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ broadcast_user_list_update –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        
        elif status == 'user_list':
            self.update_user_list(data.get('users', []))

        elif status == 'new_message':
           self.display_new_message(data)

        elif status == 'incoming_call':
            from_user = data.get('from_user')
            caller_addr = tuple(data.get('caller_addr')) # (ip, port)
            
            reply = QMessageBox.question(self, '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫',
                                         f"–í–∞–º –∑–≤–æ–Ω–∏—Ç {from_user}. –ü—Ä–∏–Ω—è—Ç—å?",
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            
            if reply == QMessageBox.StandardButton.Yes:
                self.udp_socket = self.create_udp_socket()
                if not self.udp_socket: return

                _, udp_port = self.udp_socket.getsockname()
                self.send_command('call_response', {
                    'to_user': from_user,
                    'answer': 'accept',
                    'udp_port': udp_port
                })
                self.start_call_session(from_user, caller_addr)
            else:
                self.send_command('call_response', {'to_user': from_user, 'answer': 'reject'})

        elif status == 'call_response':
            from_user = data.get('from_user')
            answer = data.get('answer')
            if answer == 'accept':
                callee_addr = tuple(data.get('callee_addr'))
                self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {from_user} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
                self.start_call_session(from_user, callee_addr)
            else:
                self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {from_user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫.")
                self.hang_up_call() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à UDP —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω

        elif status == 'status_update_success':
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –í–∞—à —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {data.get('status_emoji')}")

        elif status == 'error':
            self.show_error(str(data))
        elif status == 'info':
            self.add_message_to_box(f"–°–µ—Ä–≤–µ—Ä: {data}")

    def send_message(self):
        message = self.msg_entry.text()
        if not message: return

        # --- Plugin Hook ---
        # –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–ª–∞–≥–∏–Ω–∞–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
        # –ï—Å–ª–∏ —Ö—É–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
        continue_sending = self.plugin_manager.trigger_hook('before_send_message', message=message)
        if continue_sending is False:
            self.msg_entry.clear()
            return
        # --- End Plugin Hook ---

        if self.mode.startswith('p2p'):
            self.p2p_manager.broadcast_message(message)
            self.add_message_to_box(f"–í—ã: {message}")
        else: # server mode
            self.send_command('send_message', {'type': 'text', 'text': message})
            self.add_message_to_box(f"–í—ã: {message}")
            
        self.msg_entry.clear()

    def initiate_call(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞."""
        selected_items = self.users_list.selectedItems()
        if not selected_items: return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—Ç–∞—Ç—É—Å –∏ "(–í—ã)"
        full_text = selected_items[0].text()
        clean_text = full_text.split(' (–í—ã)')[0]
        target_user = clean_text.split(' ', 1)[1] if ' ' in clean_text else clean_text

        if target_user == self.username:
            self.show_error("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ.")
            return
        
        self.udp_socket = self.create_udp_socket()
        if not self.udp_socket: return

        _, udp_port = self.udp_socket.getsockname()
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}...")

        if self.mode == 'p2p':
            # –í P2P —Ä–µ–∂–∏–º–µ IP –∞–¥—Ä–µ—Å —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç
            self.p2p_manager.send_peer_command(target_user, 'p2p_call_request', {'udp_port': udp_port})
        else: # server mode
            self.send_command('call_request', {'to_user': target_user, 'udp_port': udp_port})

    def start_call_session(self, peer_username, peer_addr):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∑–≤–æ–Ω–∫–∞."""
        if self.audio_thread and self.audio_thread.isRunning():
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ.")
            return

        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ù–∞—á–∞–ª–æ —Å–µ–∞–Ω—Å–∞ —Å–≤—è–∑–∏ —Å {peer_username} –ø–æ –∞–¥—Ä–µ—Å—É {peer_addr}.")
        
        try:
            self.audio_thread = AudioThread(self.udp_socket, peer_addr)
            self.audio_thread.start()

            self.call_window = CallWindow(peer_username, self)
            self.call_window.hang_up_pressed.connect(self.hang_up_call)
            self.call_window.show()
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            self.hang_up_call()

    def hang_up_call(self, notify_peer=True):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∑–≤–æ–Ω–æ–∫."""
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –µ—Å–ª–∏ –º—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä
        if self.mode == 'p2p' and notify_peer and self.call_window:
            target_user = self.call_window.windowTitle().replace("–ó–≤–æ–Ω–æ–∫ —Å ", "")
            self.p2p_manager.send_peer_command(target_user, 'p2p_hang_up', {})

        if self.audio_thread:
            self.audio_thread.stop()
            self.audio_thread.wait()
            self.audio_thread = None
        
        if self.call_window:
            self.call_window.close()
            self.call_window = None
        
        self.udp_socket = None
        self.current_peer_addr = None
        self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")

    def create_udp_socket(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç UDP —Å–æ–∫–µ—Ç."""
        try:
            udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            udp_sock.bind(('', 0)) # –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫ –ª—é–±–æ–º—É –¥–æ—Å—Ç—É–ø–Ω–æ–º—É –ø–æ—Ä—Ç—É
            return udp_sock
        except socket.error as e:
            self.show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å UDP —Å–æ–∫–µ—Ç: {e}")
            return None

    def update_user_list(self, users_data):
       """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ GUI, –≤–∫–ª—é—á–∞—è –∏—Ö —Å—Ç–∞—Ç—É—Å—ã."""
       self.users_list.clear()
       # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫
       my_status = 'üòÄ' # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫
       for user_info in users_data:
           if user_info['username'] == self.username:
               my_status = user_info['status']
               break
       self.users_list.addItem(f"{my_status} {self.username} (–í—ã)")

       # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
       for user_info in users_data:
           if user_info['username'] != self.username:
               self.users_list.addItem(f"{user_info['status']} {user_info['username']}")

    # --- –°–ª–æ—Ç—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

    def open_emoji_panel(self):
        panel = EmojiPanel(self)
        panel.emoji_selected.connect(self.insert_emoji)
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å —Ä—è–¥–æ–º —Å –∫–Ω–æ–ø–∫–æ–π
        button_pos = self.emoji_button.mapToGlobal(self.emoji_button.rect().bottomLeft())
        panel.move(button_pos)
        panel.exec()

    def insert_emoji(self, emoji):
        self.msg_entry.insert(emoji)
        self.msg_entry.setFocus()

    def add_message_to_box(self, message):
       self.chat_box.append(message)

    def display_new_message(self, data):
       """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ."""
       sender = data.get('sender', '–°–∏—Å—Ç–µ–º–∞')
       text = data.get('text', '')
       self.add_message_to_box(f"<b>{sender}:</b> {text}")


    def change_status(self):
       """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞."""
       panel = EmojiPanel(self)
       panel.emoji_selected.connect(self.set_new_status)
       button_pos = self.status_button.mapToGlobal(self.status_button.rect().bottomLeft())
       panel.move(button_pos)
       panel.exec()

    def set_new_status(self, emoji):
       """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
       if self.mode == 'server':
           self.send_command('set_status', {'status_emoji': emoji})

    def p2p_message_received(self, username, text):
        self.add_message_to_box(f"{username}: {text}")

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ P2P –∑–≤–æ–Ω–∫–æ–≤ ---

    def handle_p2p_call_request(self, from_user, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ P2P –∑–≤–æ–Ω–∫–∞."""
        udp_port = payload.get('udp_port')
        peer_ip = self.p2p_manager.peers.get(from_user)[0]
        self.current_peer_addr = (peer_ip, udp_port)

        reply = QMessageBox.question(self, '–í—Ö–æ–¥—è—â–∏–π P2P –∑–≤–æ–Ω–æ–∫',
                                     f"–í–∞–º –∑–≤–æ–Ω–∏—Ç {from_user}. –ü—Ä–∏–Ω—è—Ç—å?",
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        
        if reply == QMessageBox.StandardButton.Yes:
            self.udp_socket = self.create_udp_socket()
            if not self.udp_socket: return
            
            _, my_udp_port = self.udp_socket.getsockname()
            self.p2p_manager.send_peer_command(from_user, 'p2p_call_response', {
                'answer': 'accept',
                'udp_port': my_udp_port
            })
            self.start_call_session(from_user, self.current_peer_addr)
        else:
            self.p2p_manager.send_peer_command(from_user, 'p2p_call_response', {'answer': 'reject'})
            self.current_peer_addr = None

    def handle_p2p_call_response(self, from_user, payload):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ P2P –∑–≤–æ–Ω–æ–∫."""
        answer = payload.get('answer')
        if answer == 'accept':
            udp_port = payload.get('udp_port')
            peer_ip = self.p2p_manager.peers.get(from_user)[0]
            self.current_peer_addr = (peer_ip, udp_port)
            
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {from_user} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
            self.start_call_session(from_user, self.current_peer_addr)
        else:
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {from_user} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫.")
            self.hang_up_call(notify_peer=False)

    def handle_p2p_hang_up(self, from_user):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥—Ä—É–≥–æ–≥–æ –ø–∏—Ä–∞."""
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {from_user} –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫.")
        self.hang_up_call(notify_peer=False)

    def handle_connection_lost(self):
        self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ.")
        self.disable_input()

    def add_peer(self, username, address):
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {username} —Ç–µ–ø–µ—Ä—å –≤ —Å–µ—Ç–∏.")
        self.users_list.addItem(username)

    def remove_peer(self, username):
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {username} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ç—å.")
        items = self.users_list.findItems(username, Qt.MatchFlag.MatchExactly)
        for item in items:
            self.users_list.takeItem(self.users_list.row(item))

    def search_peer_in_dht(self):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–∏—Ä–∞ –≤ DHT."""
        username_to_find = self.peer_search_input.text()
        if not username_to_find or username_to_find == self.username:
            return
        
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ò–¥–µ—Ç –ø–æ–∏—Å–∫ {username_to_find} –≤ —Å–µ—Ç–∏ DHT...")
        if self.p2p_manager:
            # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ –ø–æ—Ç–æ–∫–µ
            # P2PManager'–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å GUI.
            self.p2p_manager.find_peer(username_to_find)
        self.peer_search_input.clear()

    def enable_input(self):
        self.msg_entry.setEnabled(True)
        self.send_button.setEnabled(True)

    def disable_input(self):
        self.msg_entry.setEnabled(False)
        self.send_button.setEnabled(False)

    def show_error(self, message):
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)

    def toggle_theme(self):
       """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π."""
       self.current_theme = 'dark' if self.current_theme == 'light' else 'light'
       self.apply_theme()

    def apply_theme(self):
       """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é."""
       if self.current_theme == 'dark':
           self.setStyleSheet("""
               QWidget {
                   background-color: #2b2b2b;
                   color: #ffffff;
                   border: 1px solid #4f4f4f;
               }
               QMainWindow, QDialog {
                   background-color: #2b2b2b;
               }
               QTextEdit, QLineEdit, QListWidget {
                   background-color: #3c3c3c;
                   color: #ffffff;
                   border: 1px solid #555555;
               }
               QPushButton {
                   background-color: #555555;
                   color: #ffffff;
                   border: 1px solid #666666;
                   padding: 5px;
               }
               QPushButton:hover {
                   background-color: #666666;
               }
               QPushButton:pressed {
                   background-color: #777777;
               }
               QLabel {
                   border: none;
               }
           """)
       else: # light theme
           self.setStyleSheet("") # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def closeEvent(self, event):
        self.hang_up_call() # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if self.network_thread:
            self.network_thread.stop()
        if self.p2p_manager:
            self.p2p_manager.stop()
        event.accept()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---

if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    mode_dialog = ModeSelectionDialog()
    if mode_dialog.exec():
        mode = mode_dialog.result
        window = ChatWindow(mode)
        window.show()
        sys.exit(app.exec())
    else:
        sys.exit(0)