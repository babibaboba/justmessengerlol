import sys
import socket
import threading
import json
import pyaudio
from PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit, QLineEdit,
                             QPushButton, QVBoxLayout, QWidget, QMessageBox,
                             QDialog, QLabel, QFormLayout, QListWidget, QHBoxLayout, QSplitter,
                             QInputDialog, QGridLayout)
from PyQt6.QtCore import QThread, pyqtSignal, Qt, QSize, QMetaObject

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ñ–∞–π–ª—ã, –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
try:
    from config_manager import ConfigManager
    from p2p_manager import P2PManager
    from plugin_manager import PluginManager
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã config_manager.py, p2p_manager.py –∏ plugin_manager.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
    sys.exit(1)


HOST = '127.0.0.1'
PORT = 12345
# --- –ê—É–¥–∏–æ ---
CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 1
RATE = 44100


# --- –î–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ ---

class CallWindow(QDialog):
    """–û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞."""
    hang_up_pressed = pyqtSignal()

    def __init__(self, peer_username, parent=None):
        super().__init__(parent)
        self.setWindowTitle(f"–ó–≤–æ–Ω–æ–∫ —Å {peer_username}")
        self.setFixedSize(300, 150)
        
        self.layout = QVBoxLayout(self)
        self.label = QLabel(f"–ò–¥–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä —Å {peer_username}...")
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.hang_up_button = QPushButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫")
        
        self.layout.addWidget(self.label)
        self.layout.addWidget(self.hang_up_button)
        
        self.hang_up_button.clicked.connect(self.hang_up_pressed.emit)
        self.hang_up_pressed.connect(self.accept) # –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏

class EmojiPanel(QDialog):
    """–ü–∞–Ω–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏."""
    emoji_selected = pyqtSignal(str)

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ —ç–º–æ–¥–∑–∏")
        self.setFixedSize(300, 200)
        
        self.layout = QGridLayout(self)
        
        emojis = [
            'üòÄ', 'üòÇ', 'üòç', 'ü§î', 'üëç', 'üëé', '‚ù§Ô∏è', 'üî•',
            'üöÄ', 'üéâ', 'üëã', 'üò¢', 'üò†', 'üôè', 'üíª', 'üçï'
        ]
        
        row, col = 0, 0
        for emoji in emojis:
            button = QPushButton(emoji)
            button.setFixedSize(40, 40)
            button.setStyleSheet("font-size: 20px;")
            button.clicked.connect(lambda _, e=emoji: self.select_emoji(e))
            self.layout.addWidget(button, row, col)
            col += 1
            if col > 5:
                col = 0
                row += 1
                
    def select_emoji(self, emoji):
        self.emoji_selected.emit(emoji)
        self.accept()


class ModeSelectionDialog(QDialog):
   """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã."""
   def __init__(self, parent=None):
       super().__init__(parent)
       self.setWindowTitle("–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞")
       self.layout = QVBoxLayout(self)
       self.result = None

       self.label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞:")
       self.layout.addWidget(self.label)

       self.server_button = QPushButton("–ö–ª–∏–µ–Ω—Ç-–°–µ—Ä–≤–µ—Ä")
       self.server_button.clicked.connect(lambda: self.set_mode('server'))
       self.layout.addWidget(self.server_button)

       self.p2p_internet_button = QPushButton("P2P (–ò–Ω—Ç–µ—Ä–Ω–µ—Ç)")
       self.p2p_internet_button.clicked.connect(lambda: self.set_mode('p2p_internet'))
       self.layout.addWidget(self.p2p_internet_button)

       self.p2p_local_button = QPushButton("P2P (–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å)")
       self.p2p_local_button.clicked.connect(lambda: self.set_mode('p2p_local'))
       self.layout.addWidget(self.p2p_local_button)

   def set_mode(self, mode):
       self.result = mode
       self.accept()

# --- –°–µ—Ç–µ–≤—ã–µ –ø–æ—Ç–æ–∫–∏ ---

class ServerNetworkThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º."""
    message_received = pyqtSignal(dict)
    connection_lost = pyqtSignal()

    def __init__(self, sock):
        super().__init__()
        self.sock = sock
        self.running = True

    def run(self):
        while self.running:
            try:
                data = self.sock.recv(4096)
                if not data:
                    break
                response = json.loads(data.decode('utf-8'))
                self.message_received.emit(response)
            except (socket.error, json.JSONDecodeError, ConnectionResetError):
                if self.running:
                    self.running = False
        self.connection_lost.emit()

    def stop(self):
        self.running = False
        try:
            self.sock.shutdown(socket.SHUT_RDWR)
        except (socket.error, OSError):
            pass
        self.sock.close()

# --- –ü–æ—Ç–æ–∫ –¥–ª—è –∞—É–¥–∏–æ ---

class AudioThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö."""
    def __init__(self, udp_socket, peer_addr):
        super().__init__()
        self.udp_socket = udp_socket
        self.peer_addr = peer_addr
        self.running = True
        self.audio = pyaudio.PyAudio()
        
        self.output_stream = self.audio.open(format=FORMAT, channels=CHANNELS,
                                             rate=RATE, output=True,
                                             frames_per_buffer=CHUNK)
        
        self.input_stream = self.audio.open(format=FORMAT, channels=CHANNELS,
                                            rate=RATE, input=True,
                                            frames_per_buffer=CHUNK)

    def run(self):
        send_thread = threading.Thread(target=self.send_audio)
        receive_thread = threading.Thread(target=self.receive_audio)
        
        send_thread.start()
        receive_thread.start()
        
        send_thread.join()
        receive_thread.join()

    def send_audio(self):
        while self.running:
            try:
                data = self.input_stream.read(CHUNK, exception_on_overflow=False)
                self.udp_socket.sendto(data, self.peer_addr)
            except (IOError, OSError):
                break

    def receive_audio(self):
        while self.running:
            try:
                data, _ = self.udp_socket.recvfrom(CHUNK * 2)
                self.output_stream.write(data)
            except (IOError, OSError):
                break

    def stop(self):
        self.running = False
        # –î–∞–µ–º –ø–æ—Ç–æ–∫–∞–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        self.join(500) 
        
        if self.input_stream.is_active():
            self.input_stream.stop_stream()
        self.input_stream.close()
        
        if self.output_stream.is_active():
            self.output_stream.stop_stream()
        self.output_stream.close()
        
        self.audio.terminate()
        # UDP —Å–æ–∫–µ—Ç –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ hang_up_call
        print("–ê—É–¥–∏–æ–ø–æ—Ç–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ ---

class ChatWindow(QMainWindow):
    def __init__(self, mode):
        super().__init__()
        self.mode = mode
        self.username = None
        self.p2p_manager = None
        self.network_thread = None
        self.sock = None
        self.plugin_manager = PluginManager(plugin_folder='VoiceChat/plugins')
        
        # –î–ª—è –∑–≤–æ–Ω–∫–æ–≤
        self.udp_socket = None
        self.audio_thread = None
        self.call_window = None
        self.current_peer_addr = None
        self.pending_call_target = None # –•—Ä–∞–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∑–≤–æ–Ω–∏—Ç—å
        self.current_theme = 'light'

        self.setup_ui()
        self.apply_theme()
        self.plugin_manager.discover_plugins()
        self.initialize_mode()

    def setup_ui(self):
        self.setWindowTitle(f"JustMessenger ({self.mode.replace('_', ' ').title()})")
        self.setGeometry(100, 100, 500, 600)
        
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QHBoxLayout(self.central_widget)
        splitter = QSplitter(Qt.Orientation.Horizontal)

        chat_widget = QWidget()
        chat_layout = QVBoxLayout(chat_widget)
        self.chat_box = QTextEdit()
        self.chat_box.setReadOnly(True)
        
        input_layout = QHBoxLayout()
        self.msg_entry = QLineEdit()
        self.msg_entry.returnPressed.connect(self.send_message)
        
        self.emoji_button = QPushButton("üòÄ")
        self.emoji_button.setFixedSize(QSize(40, 28))
        self.emoji_button.clicked.connect(self.open_emoji_panel)

        self.send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        self.send_button.clicked.connect(self.send_message)
        
        input_layout.addWidget(self.msg_entry)
        input_layout.addWidget(self.emoji_button)
        input_layout.addWidget(self.send_button)

        chat_layout.addWidget(self.chat_box)
        chat_layout.addLayout(input_layout)
        splitter.addWidget(chat_widget)

        users_widget = QWidget()
        users_layout = QVBoxLayout(users_widget)
        self.users_list = QListWidget()
        users_layout.addWidget(QLabel("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Å–µ—Ç–∏:"))
        
        self.peer_search_widget = QWidget()
        peer_search_layout = QHBoxLayout(self.peer_search_widget)
        peer_search_layout.setContentsMargins(0, 0, 0, 0)
        self.peer_search_input = QLineEdit()
        self.peer_search_input.setPlaceholderText("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞")
        self.peer_search_button = QPushButton("–ù–∞–π—Ç–∏")
        peer_search_layout.addWidget(self.peer_search_input)
        peer_search_layout.addWidget(self.peer_search_button)
        self.peer_search_widget.setVisible(False)
        users_layout.addWidget(self.peer_search_widget)

        users_layout.addWidget(self.users_list)
        
        self.status_button = QPushButton("–°–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        self.status_button.clicked.connect(self.change_status)
        users_layout.addWidget(self.status_button)
        self.status_button.setVisible(False)

        splitter.addWidget(users_widget)
        
        splitter.setSizes([350, 150])
        self.main_layout.addWidget(splitter)

        self.theme_button = QPushButton("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É")
        self.theme_button.clicked.connect(self.toggle_theme)
        chat_layout.addWidget(self.theme_button)

    def initialize_mode(self):
        if self.mode == 'p2p_local':
            self.init_p2p_mode(p2p_mode='local')
        elif self.mode == 'p2p_internet':
            self.init_p2p_mode(p2p_mode='internet')
        elif self.mode == 'server':
            self.init_server_mode()

    def init_p2p_mode(self, p2p_mode='internet'):
        self.call_button = QPushButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å")
        self.call_button.clicked.connect(self.initiate_call)
        self.call_button.setEnabled(False)
        self.users_list.itemSelectionChanged.connect(lambda: self.call_button.setEnabled(True))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ layout –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_layout = self.main_layout.itemAt(0).widget().findChild(QVBoxLayout)
        if users_layout:
             users_layout.insertWidget(2, self.call_button)

        config_manager = ConfigManager()
        config = config_manager.load_config()
        self.username = config.get('username')

        if not self.username:
            text, ok = QInputDialog.getText(self, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Å–µ—Å—Å–∏–∏:')
            if ok and text:
                self.username = text
                config_manager.save_config({'username': self.username})
            else:
                sys.exit()
        
        self.setWindowTitle(f"JustMessenger ({self.mode.replace('_', ' ').title()}) - {self.username}")
        
        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.udp_socket.bind(('', 0)) # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ—Ä—Ç—É

        self.p2p_manager = P2PManager(self.username, self.udp_socket, mode=p2p_mode)
        self.p2p_manager.peer_discovered.connect(self.add_peer)
        self.p2p_manager.peer_lost.connect(self.remove_peer)
        self.p2p_manager.message_received.connect(self.p2p_message_received)
        self.p2p_manager.incoming_p2p_call.connect(self.handle_p2p_call_request)
        self.p2p_manager.p2p_call_response.connect(self.handle_p2p_call_response)
        self.p2p_manager.p2p_hang_up.connect(self.handle_p2p_hang_up)
        self.p2p_manager.hole_punch_successful.connect(self.on_hole_punch_success)
        self.p2p_manager.start()

        if p2p_mode == 'local':
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã –≤ —Ä–µ–∂–∏–º–µ P2P (–õ–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å). –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
            self.peer_search_widget.setVisible(False)
        else: # internet
            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –í—ã –≤ —Ä–µ–∂–∏–º–µ P2P (–ò–Ω—Ç–µ—Ä–Ω–µ—Ç). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            self.peer_search_widget.setVisible(True)
            self.peer_search_button.clicked.connect(self.search_peer_in_dht)
            self.peer_search_input.returnPressed.connect(self.search_peer_in_dht)

    def init_server_mode(self):
        config_manager = ConfigManager()
        config = config_manager.load_config()
        self.username = config.get('username')

        if not self.username:
            text, ok = QInputDialog.getText(self, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Å–µ—Å—Å–∏–∏:')
            if ok and text:
                self.username = text
                config_manager.save_config({'username': self.username})
            else:
                sys.exit()

        self.setWindowTitle(f"JustMessenger (–°–µ—Ä–≤–µ—Ä) - {self.username}")
        
        try:
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.sock.connect((HOST, PORT))
            
            self.network_thread = ServerNetworkThread(self.sock)
            self.network_thread.message_received.connect(self.handle_server_message)
            self.network_thread.connection_lost.connect(self.handle_connection_lost)
            self.network_thread.start()
            self.enable_input()
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É {HOST}:{PORT}")

        except ConnectionRefusedError:
            self.show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {HOST}:{PORT}.")
            self.disable_input()

    def send_message(self):
        message = self.msg_entry.text()
        if not message: return

        continue_sending = self.plugin_manager.trigger_hook('before_send_message', message=message)
        if continue_sending is False:
            self.msg_entry.clear()
            return

        if self.mode.startswith('p2p'):
            self.p2p_manager.broadcast_message(message)
            self.add_message_to_box(f"–í—ã: {message}")
        elif self.mode == 'server':
            self.send_command_to_server({'type': 'text_message', 'sender': self.username, 'text': message})
            # –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∂–¥–µ–º –µ–≥–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        
        self.msg_entry.clear()

    def send_command_to_server(self, command_dict):
        if not self.sock: return
        try:
            self.sock.sendall(json.dumps(command_dict).encode('utf-8'))
        except socket.error as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {e}")
            self.handle_connection_lost()

    def handle_server_message(self, response):
        msg_type = response.get('type')
        
        if msg_type == 'user_list':
            self.update_user_list(response.get('users', []))
        elif msg_type == 'text_message':
            sender = response.get('sender', '–°–µ—Ä–≤–µ—Ä')
            text = response.get('text', '')
            self.add_message_to_box(f"{sender}: {text}")
        elif msg_type == 'server_broadcast':
            text = response.get('text', '')
            self.plugin_manager.trigger_hook('on_server_broadcast', text=text)
            self.add_message_to_box(f"–°–ï–†–í–ï–†: {text}")

    def p2p_message_received(self, sender, text):
        # This slot receives sender (str) and text (str) from the p2p_manager signal
        if sender != self.username:
            self.add_message_to_box(f"{sender}: {text}")

    def add_peer(self, username, address_info):
        if username == self.username: return
        items = self.users_list.findItems(username, Qt.MatchFlag.MatchExactly)
        if not items:
            self.users_list.addItem(username)
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {username} –≤ —Å–µ—Ç–∏.")

    def remove_peer(self, username):
        items = self.users_list.findItems(username, Qt.MatchFlag.MatchExactly)
        for item in items:
            self.users_list.takeItem(self.users_list.row(item))
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {username} –≤—ã—à–µ–ª –∏–∑ —Å–µ—Ç–∏.")

    def search_peer_in_dht(self):
        peer_name = self.peer_search_input.text()
        if peer_name and peer_name != self.username:
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ò—â–µ–º {peer_name} –≤ DHT...")
            self.p2p_manager.find_peer(peer_name)
            self.peer_search_input.clear()

    # --- –õ–æ–≥–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤ ---
    def initiate_call(self):
        if self.audio_thread:
            self.show_error("–í—ã —É–∂–µ –≤ –∑–≤–æ–Ω–∫–µ.")
            return
            
        selected_items = self.users_list.selectedItems()
        if not selected_items:
            self.show_error("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–≤–æ–Ω–∫–∞.")
            return
            
        target_username = selected_items[0].text()
        self.pending_call_target = target_username
        
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å {target_username} (NAT Traversal)...")
        self.p2p_manager.initiate_hole_punch(target_username)

    def on_hole_punch_success(self, username, public_address):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ hole punching —É–¥–∞–ª—Å—è."""
        # –ï—Å–ª–∏ –º—ã –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞
        if self.pending_call_target == username:
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É {public_address}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫...")
            self.current_peer_addr = (public_address[0], public_address[1])
            self.p2p_manager.send_p2p_call_request(username)
        # –ï—Å–ª–∏ –º—ã –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫, —Ç–æ hole punch –±—ã–ª –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤ handle_p2p_call_request
        # –∏ —Ç–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, —á—Ç–æ –≥–æ—Ç–æ–≤—ã –∫ –∑–≤–æ–Ω–∫—É
        elif self.current_peer_addr: # current_peer_addr —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ handle_p2p_call_request
             self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–≤–æ–Ω–æ–∫...")
             self.p2p_manager.send_p2p_call_response(username, 'accept')


    def handle_p2p_call_request(self, sender_username):
        if self.audio_thread:
            self.p2p_manager.send_p2p_call_response(sender_username, 'busy')
            return

        reply = QMessageBox.question(self, '–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫',
                                     f'{sender_username} –∑–≤–æ–Ω–∏—Ç –≤–∞–º. –û—Ç–≤–µ—Ç–∏—Ç—å?',
                                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

        if reply == QMessageBox.StandardButton.Yes:
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: –ü—Ä–∏–Ω—è—Ç –∑–≤–æ–Ω–æ–∫ –æ—Ç {sender_username}. –ù–∞—á–∏–Ω–∞–µ–º NAT Traversal...")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ hole punch –æ—Ç–ø—Ä–∞–≤–∏—Ç—å 'accept'
            self.current_peer_addr = True # –§–ª–∞–≥, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–≤–µ—Ç–∞
            self.p2p_manager.initiate_hole_punch(sender_username)
        else:
            self.p2p_manager.send_p2p_call_response(sender_username, 'reject')

    def handle_p2p_call_response(self, sender_username, response):
        if response == 'accept':
            if self.pending_call_target == sender_username:
                self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {sender_username} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫. –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä.")
                self.start_audio_stream(sender_username)
        elif response == 'reject':
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {sender_username} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–≤–æ–Ω–æ–∫.")
            self.pending_call_target = None
            self.current_peer_addr = None
        elif response == 'busy':
            self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {sender_username} –∑–∞–Ω—è—Ç.")
            self.pending_call_target = None
            self.current_peer_addr = None

    def start_audio_stream(self, peer_username):
        if not self.current_peer_addr or not isinstance(self.current_peer_addr, tuple):
             self.show_error(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –∑–≤–æ–Ω–∫–∞ —Å {peer_username}.")
             self.pending_call_target = None
             return

        self.audio_thread = AudioThread(self.udp_socket, self.current_peer_addr)
        self.audio_thread.start()
        
        self.call_window = CallWindow(peer_username, self)
        self.call_window.hang_up_pressed.connect(self.hang_up_call)
        self.call_window.show()
        self.pending_call_target = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –∑–≤–æ–Ω–æ–∫ –Ω–∞—á–∞–ª—Å—è

    def hang_up_call(self):
        if self.audio_thread:
            self.audio_thread.stop()
            self.audio_thread = None
            
            # –ù–∞–π—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∞–¥—Ä–µ—Å—É
            peer_username = self.p2p_manager.get_peer_username_by_addr(self.current_peer_addr)
            if peer_username:
                self.p2p_manager.send_p2p_hang_up(peer_username)

            self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        
        if self.call_window:
            self.call_window.close()
            self.call_window = None
            
        self.current_peer_addr = None

    def handle_p2p_hang_up(self, sender_username):
        self.add_message_to_box(f"–°–∏—Å—Ç–µ–º–∞: {sender_username} –∑–∞–≤–µ—Ä—à–∏–ª –∑–≤–æ–Ω–æ–∫.")
        if self.audio_thread:
            self.audio_thread.stop()
            self.audio_thread = None
        if self.call_window:
            self.call_window.close()
            self.call_window = None
        self.current_peer_addr = None

    # --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    def add_message_to_box(self, message):
        self.chat_box.append(message)

    def update_user_list(self, users):
        self.users_list.clear()
        for user in users:
            self.users_list.addItem(user)

    def open_emoji_panel(self):
        panel = EmojiPanel(self)
        panel.emoji_selected.connect(self.insert_emoji)
        panel.exec()

    def insert_emoji(self, emoji):
        current_text = self.msg_entry.text()
        self.msg_entry.setText(current_text + emoji)

    def change_status(self):
        # –ó–∞–≥–ª—É—à–∫–∞
        self.add_message_to_box("–°–∏—Å—Ç–µ–º–∞: –§—É–Ω–∫—Ü–∏—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")

    def toggle_theme(self):
        self.current_theme = 'dark' if self.current_theme == 'light' else 'light'
        self.apply_theme()

    def apply_theme(self):
        if self.current_theme == 'dark':
            self.setStyleSheet("""
                QMainWindow, QWidget {
                    background-color: #2b2b2b;
                    color: #f0f0f0;
                }
                QTextEdit, QLineEdit {
                    background-color: #3c3f41;
                    color: #f0f0f0;
                    border: 1px solid #555;
                }
                QPushButton {
                    background-color: #555;
                    color: #f0f0f0;
                    border: 1px solid #666;
                    padding: 5px;
                }
                QPushButton:hover {
                    background-color: #666;
                }
                QListWidget {
                    background-color: #3c3f41;
                    color: #f0f0f0;
                }
            """)
        else: # light
            self.setStyleSheet("") # –°–±—Ä–æ—Å –∫ —Å—Ç–∏–ª—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    def show_error(self, message):
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)

    def enable_input(self):
        self.msg_entry.setEnabled(True)
        self.send_button.setEnabled(True)

    def disable_input(self):
        self.msg_entry.setEnabled(False)
        self.send_button.setEnabled(False)

    def handle_connection_lost(self):
        if self.network_thread:
            self.network_thread.stop()
            self.network_thread = None
        self.show_error("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ—Ç–µ—Ä—è–Ω–æ.")
        self.disable_input()
        self.update_user_list([])

    def closeEvent(self, event):
        if self.network_thread:
            self.network_thread.stop()
        if self.p2p_manager:
            self.p2p_manager.stop()
        if self.audio_thread:
            self.hang_up_call()
        if self.udp_socket:
            self.udp_socket.close()
        event.accept()

def main():
    app = QApplication(sys.argv)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    mode_dialog = ModeSelectionDialog()
    if mode_dialog.exec() == QDialog.DialogCode.Accepted:
        mode = mode_dialog.result
        if mode:
            window = ChatWindow(mode=mode)
            window.show()
            sys.exit(app.exec())
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –¥–∏–∞–ª–æ–≥, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        sys.exit(0)

if __name__ == '__main__':
    main()